// Code generated by MockGen. DO NOT EDIT.
// Source: classroom/internal/classroom.go
//
// Generated by this command:
//
//	mockgen -source=classroom/internal/classroom.go -destination=classroom/internal/mocks/mock_sleeper.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTimeSleeper is a mock of TimeSleeper interface.
type MockTimeSleeper struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSleeperMockRecorder
}

// MockTimeSleeperMockRecorder is the mock recorder for MockTimeSleeper.
type MockTimeSleeperMockRecorder struct {
	mock *MockTimeSleeper
}

// NewMockTimeSleeper creates a new mock instance.
func NewMockTimeSleeper(ctrl *gomock.Controller) *MockTimeSleeper {
	mock := &MockTimeSleeper{ctrl: ctrl}
	mock.recorder = &MockTimeSleeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeSleeper) EXPECT() *MockTimeSleeperMockRecorder {
	return m.recorder
}

// Sleep mocks base method.
func (m *MockTimeSleeper) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockTimeSleeperMockRecorder) Sleep(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockTimeSleeper)(nil).Sleep), d)
}
